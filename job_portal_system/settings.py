"""
Django settings for job_portal_system project.

Generated by 'django-admin startproject' using Django 4.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# step 2: defining "accounts.CustomUser" as the AUTH_USER_MODEL
AUTH_USER_MODEL = "accounts.CustomUser" 




import environ
env = environ.Env()
environ.Env.read_env()


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Secret key accessed from .env file
SECRET_KEY = env("SECRET_KEY")


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True


ALLOWED_HOSTS = ["*"]

# allowing all origins for accessing from our API
CORS_ALLOW_ALL_ORIGINS = True



# Application definition

INSTALLED_APPS = [
    # whitenoise app
    "whitenoise.runserver_nostatic",

    # pre
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',


    # apps
    'accounts',
    'job_seeker',
    'employer',
    'category',
    'job_post',
    'job_application',
    'payment',


    # 3rd party libraries
    'rest_framework',
    'rest_framework.authtoken',
    "dj_rest_auth",

    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',

    "corsheaders",
]



REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.TokenAuthentication",
    ],
    
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.AllowAny",
    ],
}



MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.common.CommonMiddleware',
    'allauth.account.middleware.AccountMiddleware',

    # for session middleware
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',

    # for CSRF middleware
    'django.middleware.security.SecurityMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # whitenoise middleware (for vercel deployment only)
    "whitenoise.middleware.WhiteNoiseMiddleware",
]


# To trust and allow CSRF token on deployment, adding our frontend domain to CSRF_TRUSTED_ORIGINS list
CSRF_TRUSTED_ORIGINS = [
    'https://bd-job-portal.netlify.app',    # deployed frontend 
    'http://localhost:5173',                # frontend's localhost
]



ROOT_URLCONF = 'job_portal_system.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

SITE_ID = 1



# default WSGI_APPLICATION setting
# WSGI_APPLICATION = 'job_portal_system.wsgi.application'

# WSGI_APPLICATION setting modified for vercel deploy   
WSGI_APPLICATION = 'job_portal_system.wsgi.app'





# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases


# # default sqlite3 database
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }




# postgreSQL database for superbase & vercel deploy purpose
# credentials accessed from .env file
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': env("DB_NAME"),
        'USER': env("DB_USER"),
        'PASSWORD': env("DB_PASSWORD"),
        'HOST': env("DB_HOST"),
        'PORT': env("DB_PORT"),
    }
}





# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# setting STATIC_ROOT
STATIC_ROOT = BASE_DIR / 'staticfiles'


# defining media path
STATIC_URL = 'media/'


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'



# email configuration
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_USE_TLS = True
EMAIL_PORT = 587
EMAIL_HOST_USER = env("EMAIL")
EMAIL_HOST_PASSWORD = env("EMAIL_PASSWORD")



# SSLCommerz Sandbox Configuration
SSLCOMMERZ = {
    'store_id': env("store_ID"),
    'store_pass': env("store_password"),
    'issandbox': True  # Set to False for live transactions
}
